/* jshint node: true */
'use strict';

/**
  # sdp-lines

  This is a simple
  [SDP](http://en.wikipedia.org/wiki/Session_Description_Protocol) library
  designed for in-place modification of sdp lines.

  ## Why?

  SDP parsing in browsers is relatively brittle (and not currently compliant
  with the latest SDP RFC: [4566](http://tools.ietf.org/html/rfc4566)). This
  library has been developed as an __interim__ approach for dealing with SDP
  generated by a browser.

  It follows the following rules:

  - The order of SDP lines is never modified (in order = out order)

  - SDP lines are not modified unless a specific tweak requires modifying the
    line.  That is, a line is not parsed and regenerated unless a particular
    modification operation requires it.

  - Any new lines added to the SDP are added either after existing lines of
    the same time (for instance `a` lines), or if no other lines exist within
    the relevant scope, then immediately after the line type specified in the
    4566 RFC.

  ## Example Usage

  To be completed.

  ## Alternative Options

  If you are looking for an SDP parser which works with an intermediate JS
  object format, then any of the libraries below will do what you need:

  - https://github.com/clux/sdp-transform
  - https://github.com/legastero/sdp
  - https://github.com/buildar/getting_started_with_webrtc

  ## Related Information

  The following standard documents are related to SDP with regards to WebRTC:

  - <http://tools.ietf.org/id/draft-nandakumar-rtcweb-sdp-01.html>
  - <http://tools.ietf.org/html/rfc3264>
  - <http://tools.ietf.org/html/rfc4566>

**/

function SdpLines(input) {
  if (! (this instanceof SdpLines)) {
    return new SdpLines(input);
  }

  this.data = input.split(/\r\n/);
}

module.exports = SdpLines;

/**
  ### modify(regex, modifier)

  The `modify` method is used to apply a change to the underlying data. When
  a line matches the specified regex, the modifier function is invoked with
  the following function signature:

  ```js
  function modifier(line, match, type, payload) {
    // return the line to reinject back into the sdp
    return line;
  }
  ```

  The arguments to the following are as follows:

  - `line`:    the full line that matched the regex
  - `match`:   the match result from executing the regex
  - `type`:    the line type which is specified prior to the = (e.g. `a`)
  - `payload`: the payload of the line (after the = character)

  In the sample modifier above, we simply return the line unchanged, but
  we can reformat the line or replace it entirely.
  
**/
SdpLines.prototype.modify = function(regex, modifier) {
  this.data = this.data.map(function(line, index) {
    var match = regex.exec(line);

    // if we have a match (and a modifier function) modify
    if (match && typeof modifier == 'function') {
      line = modifier.apply(null, [line, regex].concat(line.split('=')));
    }

    return line;
  });

  return this;
}

/**
  ### toString()

  Convert back to a string representation
**/
SdpLines.prototype.toString = function() {
  return this.data.join('\r\n');
};